/* Variables */

:root{

    --blue-background: #365ABA;
    --blue-light-background: #8D8FC0;
    --color-white: #eee;
    --color-grey: #333;

}



/* Global css rules */

*{

    margin: 0;
    padding: 0;
    box-sizing: border-box;
    
}


html{
    
    font-size: 62.5%;
    font-family: 'Poppins', sans-serif;

}

body{

    font-size: 1.6rem;


}

header{

    width: 90%;
    min-height: 10vh;
    margin: 0 auto;
    padding: 2em 0;
    background: linear-gradient(to bottom, var(--blue-light-background), var(--blue-background));
    border-bottom: 1px solid var(--color-white);


}

header h1{

    color: #eee;
    text-transform: uppercase;
    text-align: center;
    font-size: 3.5rem;
    font-weight: 400;

}

h2{

    color: #eee;
    text-transform: uppercase;
    text-align: center;
    font-size: 2.5rem;
    font-weight: 300;



}

[class ^= "box-"]{

    display: grid;
    place-items: center;
    padding: 1em;
    border: 5px solid var(--color-grey);
    border-radius: 20px;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
    color: var(--color-white);
}

.section-main{

    width: 90%;
    min-height: 100vh;
    margin: 0 auto;
    background: linear-gradient(to bottom, var(--blue-background), var(--blue-light-background));

}

/* Pancake Layout */

.section-pancake{

    width: 90%;
    min-height: 90vh;
    margin: 0 auto;
    border-bottom: 1px solid var(--color-white);
    padding: 1em;


    display: grid;
    grid-template-rows: auto auto 1fr auto;
    gap: 1em;

}


/* 12 Grid Column Layout */


/* 

In the above Pancake layout; we only needed to use grid-template-rows and specify how many rows there are by specifying the sizes of each row in sequence. In the below example, we use grid-template-rows to first define the sizing of each row of which there are two rows: auto for the first row for the heading and 1fr for the second row which takes up the remaining space. 

We can then specify how many columns each element takes up by defining this on each class separately. 

*/


.section-beginner-plus{

    width: 90%;
    min-height: 90vh;
    margin: 0 auto;
    border-bottom: 1px solid var(--color-white);
    padding: 1em;


    display: grid;
    grid-template-rows: auto 1fr;
    grid-template-columns: repeat(12, 1fr);
    gap: 1em;

}

/* The heading takes up the whole width of the section as it spans across all 12 columns */

.section-beginner-plus h2{

    grid-column: 1 / 13;

}

/* Each element spans n number of columns which in total adds up to 12 columns */


.section-beginner-plus .box-4 {

    grid-column: span 2;


}

.section-beginner-plus .box-5 {

    grid-column: span 6;

}

.section-beginner-plus .box-6{


    grid-column: span 4;

}

/* 12 Grid responsive layout */

/* 


In the above layout we dealt with a 12 grid column layout without it being responsive.  In this layout we will be utilising the 12 grid column layout as before but will be making it full responsive. 


*/

.section-intermediate-responsive{

    width: 90%;
    min-height: 90vh;
    margin: 0 auto;
    border-bottom: 1px solid var(--color-white);
    padding: 1em;


}

.section-intermediate-responsive h2{

    padding: 1em;


}

.section-intermediate-responsive .main-layout-responsive{

    width: 100%;
    min-height: 90vh;
    margin: 0 auto;


    display: grid;
    gap: 1em;


}

/* 

We can make the layout responsive using media queries.  We will be using min-width rather than max-width as the layout is mobile first.

*/

/* Below styles will apply when the screen reaches 768px in width  */



@media (min-width: 48em){

    .main-layout-responsive{

        grid-template-columns: repeat(12, 1fr);
        grid-template-rows: 100px 80px 1fr 80px 100px;


    }

    .main-layout-responsive .box-7{

        grid-column: 1 / 13;


    }

    .main-layout-responsive .box-8{

        grid-column: 1 / 13;


    }

    .main-layout-responsive .box-9{

        grid-column: 1 / 13;

    }

    .main-layout-responsive .box-10{

        grid-column: 1 / 7;


    }

    .main-layout-responsive .box-11{

        grid-column: 7 / 13;


    }

    .main-layout-responsive .box-12{

        grid-column: 1 / 13;


    }

}


@media (min-width: 67.5em){

    .main-layout-responsive{

        grid-template-columns: repeat(12, 1fr);
        grid-template-rows: 100px 1fr 100px;
    }


    /* Header(1) */
    .main-layout-responsive .box-7{

        grid-column: 1 / 13;


    }

    /* Ad(2) */
    .main-layout-responsive .box-8{

        grid-column: 1 / 3;
        grid-row: 2 / 3;


    }

    /* Main(3) */
    .main-layout-responsive .box-9{

        grid-column: 3 / 11;
        grid-row: 2 / 3;

    }

    /* Blog(4) */
    .main-layout-responsive .box-10{

        grid-column: 1 / 3;
        grid-row: 3 / 4;


    }

    /* Side(5) */
    .main-layout-responsive .box-11{

        grid-column: 11 / 13;
        grid-row: 2 / 3;


    }

    /* Footer(6) */
    .main-layout-responsive .box-12{

        grid-column: 3 / 13;


    }
}




/* 12 Grid responsive layout by creating a template */

/* 

In the above layout, we utitlised the 12 grid column - sizing each element using the column and row numbers, we made it responsive using media queries. In this layout we will be sizing each element by creating a template and specifying which element belongs to within the template. 

*/


.section-pro-responsive-grid-template{

    width: 90%;
    min-height: 90vh;
    margin: 0 auto;
    border-bottom: 1px solid var(--color-white);
    padding: 1em;


}


.section-pro-responsive-grid-template h2{

    padding: 1em;

}

.section-pro-responsive-grid-template .main-layout-responsive-template {

    width: 100%;
    min-height: 90vh;
    margin: 0 auto;


    display: grid;
    gap: 1em;

    grid-template-columns: repeat(12, 1fr);

    /* 
    
    Instead of grid-template-rows, we are going to create a template. Nb. Each 3 letters represents a separate column; a total of 12 columns 
    
    */

    grid-template-areas:

    "hdr hdr hdr hdr   hdr hdr hdr hdr   hdr hdr hdr hdr"
    "blg blg blg blg   mnn mnn mnn mnn   mnn mnn mnn mnn"
    "blg blg blg blg   mnn mnn mnn mnn   mnn mnn mnn mnn"
    "sbr sbr sbr sbr   mnn mnn mnn mnn   mnn mnn mnn mnn"
    "sbr sbr sbr sbr   ftr ftr ftr ftr   ftr ftr ftr ftr"

} 

.section-pro-responsive-grid-template .main-layout-responsive-template .box-13{

    grid-area: hdr;
    

}


.section-pro-responsive-grid-template .main-layout-responsive-template .box-14{


    grid-area: blg;


}


.section-pro-responsive-grid-template .main-layout-responsive-template .box-15{

    grid-area: mnn;


}

.section-pro-responsive-grid-template .main-layout-responsive-template .box-16{

    grid-area: sbr;


}


.section-pro-responsive-grid-template .main-layout-responsive-template .box-17{

    grid-area: ftr;


}


/* To make it responsive, we will use media queries */


@media (min-width: 48em) {

    .section-pro-responsive-grid-template .main-layout-responsive-template {

        width: 100%;
        min-height: 90vh;
        margin: 0 auto;
    
    
        display: grid;
        gap: 1em;
    
        grid-template-columns: repeat(12, 1fr);
    
        /* 
        
        Instead of grid-template-rows, we are going to create a template. Nb. Each 3 letters represents a separate column; a total of 12 columns 
        
        */
    
        grid-template-areas:
    
        "hdr hdr hdr hdr   hdr hdr hdr hdr   hdr hdr hdr hdr"
        "blg blg blg mnn   mnn mnn mnn mnn   mnn sbr sbr sbr"
        "blg blg blg mnn   mnn mnn mnn mnn   mnn sbr sbr sbr"
        "blg blg blg mnn   mnn mnn mnn mnn   mnn sbr sbr sbr"
        "ftr ftr ftr ftr   ftr ftr ftr ftr   ftr ftr ftr ftr"
    
    } 
    
    .section-pro-responsive-grid-template .main-layout-responsive-template .box-13{
    
        grid-area: hdr;
        
    
    }
    
    
    .section-pro-responsive-grid-template .main-layout-responsive-template .box-14{
    
    
        grid-area: blg;
    
    
    }
    
    
    .section-pro-responsive-grid-template .main-layout-responsive-template .box-15{
    
        grid-area: mnn;
    
    
    }
    
    .section-pro-responsive-grid-template .main-layout-responsive-template .box-16{
    
        grid-area: sbr;
    
    
    }
    
    
    .section-pro-responsive-grid-template .main-layout-responsive-template .box-17{
    
        grid-area: ftr;
    
    
    }    
}



@media (min-width: 67.5em){

    .section-pro-responsive-grid-template .main-layout-responsive-template {

        width: 100%;
        min-height: 90vh;
        margin: 0 auto;
    
    
        display: grid;
        gap: 1em;
    
        grid-template-columns: repeat(12, 1fr);
    
        /* 
        
        Instead of grid-template-rows, we are going to create a template. Nb. Each 3 letters represents a separate column; a total of 12 columns 
        
        */
    
        grid-template-areas:
    
        "hdr hdr hdr hdr   hdr hdr hdr hdr   hdr hdr hdr hdr"
        "blg blg mnn mnn   mnn mnn mnn mnn   mnn mnn sbr sbr"
        "blg blg mnn mnn   mnn mnn mnn mnn   mnn mnn sbr sbr"
        "blg blg mnn mnn   mnn mnn mnn mnn   mnn mnn sbr sbr"
        "ftr ftr ftr ftr   ftr ftr ftr ftr   ftr ftr sbr sbr"
    
    } 
    
    .section-pro-responsive-grid-template .main-layout-responsive-template .box-13{
    
        grid-area: hdr;
        
    
    }
    
    
    .section-pro-responsive-grid-template .main-layout-responsive-template .box-14{
    
    
        grid-area: blg;
    
    
    }
    
    
    .section-pro-responsive-grid-template .main-layout-responsive-template .box-15{
    
        grid-area: mnn;
    
    
    }
    
    .section-pro-responsive-grid-template .main-layout-responsive-template .box-16{
    
        grid-area: sbr;
    
    
    }
    
    
    .section-pro-responsive-grid-template .main-layout-responsive-template .box-17{
    
        grid-area: ftr;
    
    
    }

}


/* Responsive layout without using media queries */


.section-master-responsive{

    width: 90%;
    min-height: 90vh;
    margin: 0 auto;
    
}


.section-master-responsive h2{

    padding: 1em;

}


.card-container{

    display: grid;
    gap: 1em;
    
    
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));

    /* This property helps to center the card items in the center of the card container column */
    place-items: center;

}


.section-master-responsive .card{

    width: 300px;
    min-height: auto;
    text-align: center;
    background: rgba(255, 255, 255, .1);
    box-shadow: 0 0 5px rgba(0, 0, 0, .1);
    border-radius: 20px;
    padding: 0.255em;
    
}

.section-master-responsive .card .card-image{

    width: 200px;
    height: auto;
    margin: 0 auto;
    object-fit: cover;
    padding: 1em 0 1em 0;
}

.section-master-responsive .card .card-image img{

    border-radius:  50%;

}


.section-master-responsive .card .card-content{

    padding: 1em 0.5em 1em 0.5em;
    background: darkblue;
    border-radius: 20px;
    color: #fff;
}

.section-master-responsive .card .card-content h2{

    padding: 0;
    padding-bottom: 1em;

}


