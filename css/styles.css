/* Variables */

:root{

    --blue-background: #365ABA;
    --blue-light-background: #8D8FC0;
    --color-white: #eee;
    --color-grey: #333;

}



/* Global css rules */

*{

    margin: 0;
    padding: 0;
    box-sizing: border-box;
    
}


html{
    
    font-size: 62.5%;
    font-family: 'Poppins', sans-serif;

}

header{

    width: 90%;
    min-height: 10vh;
    margin: 0 auto;
    padding: 2em 0;
    background: linear-gradient(to bottom, var(--blue-light-background), var(--blue-background));
    border-bottom: 1px solid var(--color-white);


}

header h1{

    color: #eee;
    text-transform: uppercase;
    text-align: center;
    font-size: 3.5rem;
    font-weight: 400;

}

h2{

    color: #eee;
    text-transform: uppercase;
    text-align: center;
    font-size: 2.5rem;
    font-weight: 300;



}

[class ^= "box-"]{

    display: grid;
    place-items: center;
    padding: 1em;
    border: 5px solid var(--color-grey);
    border-radius: 20px;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
    color: var(--color-white);
}

.section-main{

    width: 90%;
    min-height: 100vh;
    margin: 0 auto;
    background: linear-gradient(to bottom, var(--blue-background), var(--blue-light-background));
    font-size: 2rem;

}

/* Pancake Layout */

.section-pancake{

    width: 90%;
    min-height: 90vh;
    margin: 0 auto;
    border-bottom: 1px solid var(--color-white);
    padding: 1em;


    display: grid;
    grid-template-rows: auto auto 1fr auto;
    gap: 1em;

}


/* 12 Grid Column Layout */


/* 

In the above Pancake layout; we only needed to use grid-template-rows and specify how many rows there are by specifying the sizes of each row in sequence. In the below example, we use grid-template-rows to first define the sizing of each row of which there are two rows: auto for the first row for the heading and 1fr for the second row which takes up the remaining space. 

We can then specify how many columns each element takes up by defining this on each class separately. 

*/


.section-beginner-plus{

    width: 90%;
    min-height: 90vh;
    margin: 0 auto;
    border-bottom: 1px solid var(--color-white);
    padding: 1em;


    display: grid;
    grid-template-rows: auto 1fr;
    grid-template-columns: repeat(12, 1fr);
    gap: 1em;

}

/* The heading takes up the whole width of the section as it spans across all 12 columns */

.section-beginner-plus h2{

    grid-column: 1 / 13;

}

/* Each element spans n number of columns which in total adds up to 12 columns */


.section-beginner-plus .box-4 {

    grid-column: span 2;


}

.section-beginner-plus .box-5 {

    grid-column: span 6;

}

.section-beginner-plus .box-6{


    grid-column: span 4;

}

/* 


In the above layout we dealt with a 12 grid column layout without it being responsive.  In this layout we will be utilising the 12 grid column layout as before but will be making it full responsive. 


*/

.section-intermediate-responsive{

    width: 90%;
    min-height: 90vh;
    margin: 0 auto;
    border-bottom: 1px solid var(--color-white);
    padding: 1em;

    /* display: grid; */


}

.section-intermediate-responsive h2{

    padding: 1em;


}

.main-layout-responsive{

    width: 100%;
    min-height: 90vh;
    margin: 0 auto;


    display: grid;
    gap: 1em;


}



/* 


We can make the layout responsive using media queries.  We will be using min-width rather than max-width as the layout is mobile first.



*/


@media (min-width: 768px){

    .main-layout-responsive{

        grid-template-columns: repeat(12, 1fr);
        grid-template-rows: 100px 80px 1fr 80px 100px;


    }

    .main-layout-responsive .box-7{

        grid-column: 1 / 13;


    }

    .main-layout-responsive .box-8{

        grid-column: 1 / 13;


    }

    .main-layout-responsive .box-9{

        grid-column: 1 / 13;

    }

    .main-layout-responsive .box-10{

        grid-column: 1 / 7;


    }

    .main-layout-responsive .box-11{

        grid-column: 7 / 13;


    }

    .main-layout-responsive .box-12{

        grid-column: 1 / 13;


    }



}


@media (min-width: 1080px){

    .main-layout-responsive{

        grid-template-columns: repeat(12, 1fr);
        grid-template-rows: 100px 400px 1fr; 
    }


    /* Header(1) */
    .main-layout-responsive .box-7{

        grid-column: 1 / 13;


    }

    /* Ad(2) */
    .main-layout-responsive .box-8{

        grid-column: 1 / 3;
        grid-row: 2 / 3;


    }

    /* Main(3) */
    .main-layout-responsive .box-9{

        grid-column: 3 / 13;
        grid-row: 2 / 3;

    }

    /* Blog(4) */
    .main-layout-responsive .box-10{

        grid-column: 1 / 7;


    }

    /* Side(5) */
    .main-layout-responsive .box-11{

        grid-column: 7 / 13;


    }

    /* Footer(6) */
    .main-layout-responsive .box-12{

        grid-column: 1 / 13;


    }



}

